# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FeatureVector(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, fg_pct_h: float=None, fg3_pct_h: float=None, ft_pct_h: float=None, reb_h: int=None, tot_ast_h: int=None, tot_tov_h: int=None, tot_stl_h: int=None, tot_blk_h: int=None, ts_pct_h: float=None, w_pct_h: float=None, w_pct_last_5_games_h: float=None, fg_pct_a: float=None, fg3_pct_a: float=None, ft_pct_a: float=None, reb_a: int=None, tot_ast_a: int=None, tot_tov_a: int=None, tot_stl_a: int=None, tot_blk_a: int=None, ts_pct_a: float=None, w_pct_a: float=None, w_pct_last_5_games_a: float=None, off_rating_h: float=None, def_rating_h: float=None, off_rating_a: float=None, def_rating_a: float=None, lineup_efficiency_h: float=None, lineup_efficiency_a: float=None, home_team: str=None, away_team: str=None, game_id: str=None, winner: str=None, pts_h: int=None, pts_a: int=None, season: str=None, _date: date=None, playoff: bool=None, referee_name: str=None, referee_id: int=None):  # noqa: E501
        """FeatureVector - a model defined in Swagger

        :param fg_pct_h: The fg_pct_h of this FeatureVector.  # noqa: E501
        :type fg_pct_h: float
        :param fg3_pct_h: The fg3_pct_h of this FeatureVector.  # noqa: E501
        :type fg3_pct_h: float
        :param ft_pct_h: The ft_pct_h of this FeatureVector.  # noqa: E501
        :type ft_pct_h: float
        :param reb_h: The reb_h of this FeatureVector.  # noqa: E501
        :type reb_h: int
        :param tot_ast_h: The tot_ast_h of this FeatureVector.  # noqa: E501
        :type tot_ast_h: int
        :param tot_tov_h: The tot_tov_h of this FeatureVector.  # noqa: E501
        :type tot_tov_h: int
        :param tot_stl_h: The tot_stl_h of this FeatureVector.  # noqa: E501
        :type tot_stl_h: int
        :param tot_blk_h: The tot_blk_h of this FeatureVector.  # noqa: E501
        :type tot_blk_h: int
        :param ts_pct_h: The ts_pct_h of this FeatureVector.  # noqa: E501
        :type ts_pct_h: float
        :param w_pct_h: The w_pct_h of this FeatureVector.  # noqa: E501
        :type w_pct_h: float
        :param w_pct_last_5_games_h: The w_pct_last_5_games_h of this FeatureVector.  # noqa: E501
        :type w_pct_last_5_games_h: float
        :param fg_pct_a: The fg_pct_a of this FeatureVector.  # noqa: E501
        :type fg_pct_a: float
        :param fg3_pct_a: The fg3_pct_a of this FeatureVector.  # noqa: E501
        :type fg3_pct_a: float
        :param ft_pct_a: The ft_pct_a of this FeatureVector.  # noqa: E501
        :type ft_pct_a: float
        :param reb_a: The reb_a of this FeatureVector.  # noqa: E501
        :type reb_a: int
        :param tot_ast_a: The tot_ast_a of this FeatureVector.  # noqa: E501
        :type tot_ast_a: int
        :param tot_tov_a: The tot_tov_a of this FeatureVector.  # noqa: E501
        :type tot_tov_a: int
        :param tot_stl_a: The tot_stl_a of this FeatureVector.  # noqa: E501
        :type tot_stl_a: int
        :param tot_blk_a: The tot_blk_a of this FeatureVector.  # noqa: E501
        :type tot_blk_a: int
        :param ts_pct_a: The ts_pct_a of this FeatureVector.  # noqa: E501
        :type ts_pct_a: float
        :param w_pct_a: The w_pct_a of this FeatureVector.  # noqa: E501
        :type w_pct_a: float
        :param w_pct_last_5_games_a: The w_pct_last_5_games_a of this FeatureVector.  # noqa: E501
        :type w_pct_last_5_games_a: float
        :param off_rating_h: The off_rating_h of this FeatureVector.  # noqa: E501
        :type off_rating_h: float
        :param def_rating_h: The def_rating_h of this FeatureVector.  # noqa: E501
        :type def_rating_h: float
        :param off_rating_a: The off_rating_a of this FeatureVector.  # noqa: E501
        :type off_rating_a: float
        :param def_rating_a: The def_rating_a of this FeatureVector.  # noqa: E501
        :type def_rating_a: float
        :param lineup_efficiency_h: The lineup_efficiency_h of this FeatureVector.  # noqa: E501
        :type lineup_efficiency_h: float
        :param lineup_efficiency_a: The lineup_efficiency_a of this FeatureVector.  # noqa: E501
        :type lineup_efficiency_a: float
        :param home_team: The home_team of this FeatureVector.  # noqa: E501
        :type home_team: str
        :param away_team: The away_team of this FeatureVector.  # noqa: E501
        :type away_team: str
        :param game_id: The game_id of this FeatureVector.  # noqa: E501
        :type game_id: str
        :param winner: The winner of this FeatureVector.  # noqa: E501
        :type winner: str
        :param pts_h: The pts_h of this FeatureVector.  # noqa: E501
        :type pts_h: int
        :param pts_a: The pts_a of this FeatureVector.  # noqa: E501
        :type pts_a: int
        :param season: The season of this FeatureVector.  # noqa: E501
        :type season: str
        :param _date: The _date of this FeatureVector.  # noqa: E501
        :type _date: date
        :param playoff: The playoff of this FeatureVector.  # noqa: E501
        :type playoff: bool
        :param referee_name: The referee_name of this FeatureVector.  # noqa: E501
        :type referee_name: str
        :param referee_id: The referee_id of this FeatureVector.  # noqa: E501
        :type referee_id: int
        """
        self.swagger_types = {
            'fg_pct_h': float,
            'fg3_pct_h': float,
            'ft_pct_h': float,
            'reb_h': int,
            'tot_ast_h': int,
            'tot_tov_h': int,
            'tot_stl_h': int,
            'tot_blk_h': int,
            'ts_pct_h': float,
            'w_pct_h': float,
            'w_pct_last_5_games_h': float,
            'fg_pct_a': float,
            'fg3_pct_a': float,
            'ft_pct_a': float,
            'reb_a': int,
            'tot_ast_a': int,
            'tot_tov_a': int,
            'tot_stl_a': int,
            'tot_blk_a': int,
            'ts_pct_a': float,
            'w_pct_a': float,
            'w_pct_last_5_games_a': float,
            'off_rating_h': float,
            'def_rating_h': float,
            'off_rating_a': float,
            'def_rating_a': float,
            'lineup_efficiency_h': float,
            'lineup_efficiency_a': float,
            'home_team': str,
            'away_team': str,
            'game_id': str,
            'winner': str,
            'pts_h': int,
            'pts_a': int,
            'season': str,
            '_date': date,
            'playoff': bool,
            'referee_name': str,
            'referee_id': int
        }

        self.attribute_map = {
            'fg_pct_h': 'fg_pct_H',
            'fg3_pct_h': 'fg3_pct_H',
            'ft_pct_h': 'ft_pct_H',
            'reb_h': 'reb_H',
            'tot_ast_h': 'tot_ast_H',
            'tot_tov_h': 'tot_tov_H',
            'tot_stl_h': 'tot_stl_H',
            'tot_blk_h': 'tot_blk_H',
            'ts_pct_h': 'ts_pct_H',
            'w_pct_h': 'w_pct_H',
            'w_pct_last_5_games_h': 'w_pct_last_5_games_H',
            'fg_pct_a': 'fg_pct_A',
            'fg3_pct_a': 'fg3_pct_A',
            'ft_pct_a': 'ft_pct_A',
            'reb_a': 'reb_A',
            'tot_ast_a': 'tot_ast_A',
            'tot_tov_a': 'tot_tov_A',
            'tot_stl_a': 'tot_stl_A',
            'tot_blk_a': 'tot_blk_A',
            'ts_pct_a': 'ts_pct_A',
            'w_pct_a': 'w_pct_A',
            'w_pct_last_5_games_a': 'w_pct_last_5_games_A',
            'off_rating_h': 'off_rating_H',
            'def_rating_h': 'def_rating_H',
            'off_rating_a': 'off_rating_A',
            'def_rating_a': 'def_rating_A',
            'lineup_efficiency_h': 'lineup_efficiency_H',
            'lineup_efficiency_a': 'lineup_efficiency_A',
            'home_team': 'home_team',
            'away_team': 'away_team',
            'game_id': 'game_id',
            'winner': 'winner',
            'pts_h': 'pts_H',
            'pts_a': 'pts_A',
            'season': 'season',
            '_date': 'date',
            'playoff': 'playoff',
            'referee_name': 'referee_name',
            'referee_id': 'referee_id'
        }
        self._fg_pct_h = fg_pct_h
        self._fg3_pct_h = fg3_pct_h
        self._ft_pct_h = ft_pct_h
        self._reb_h = reb_h
        self._tot_ast_h = tot_ast_h
        self._tot_tov_h = tot_tov_h
        self._tot_stl_h = tot_stl_h
        self._tot_blk_h = tot_blk_h
        self._ts_pct_h = ts_pct_h
        self._w_pct_h = w_pct_h
        self._w_pct_last_5_games_h = w_pct_last_5_games_h
        self._fg_pct_a = fg_pct_a
        self._fg3_pct_a = fg3_pct_a
        self._ft_pct_a = ft_pct_a
        self._reb_a = reb_a
        self._tot_ast_a = tot_ast_a
        self._tot_tov_a = tot_tov_a
        self._tot_stl_a = tot_stl_a
        self._tot_blk_a = tot_blk_a
        self._ts_pct_a = ts_pct_a
        self._w_pct_a = w_pct_a
        self._w_pct_last_5_games_a = w_pct_last_5_games_a
        self._off_rating_h = off_rating_h
        self._def_rating_h = def_rating_h
        self._off_rating_a = off_rating_a
        self._def_rating_a = def_rating_a
        self._lineup_efficiency_h = lineup_efficiency_h
        self._lineup_efficiency_a = lineup_efficiency_a
        self._home_team = home_team
        self._away_team = away_team
        self._game_id = game_id
        self._winner = winner
        self._pts_h = pts_h
        self._pts_a = pts_a
        self._season = season
        self.__date = _date
        self._playoff = playoff
        self._referee_name = referee_name
        self._referee_id = referee_id

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureVector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureVector of this FeatureVector.  # noqa: E501
        :rtype: FeatureVector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fg_pct_h(self) -> float:
        """Gets the fg_pct_h of this FeatureVector.

        Field goal percentage for the home team  # noqa: E501

        :return: The fg_pct_h of this FeatureVector.
        :rtype: float
        """
        return self._fg_pct_h

    @fg_pct_h.setter
    def fg_pct_h(self, fg_pct_h: float):
        """Sets the fg_pct_h of this FeatureVector.

        Field goal percentage for the home team  # noqa: E501

        :param fg_pct_h: The fg_pct_h of this FeatureVector.
        :type fg_pct_h: float
        """

        self._fg_pct_h = fg_pct_h

    @property
    def fg3_pct_h(self) -> float:
        """Gets the fg3_pct_h of this FeatureVector.

        Three-point field goal percentage for the home team  # noqa: E501

        :return: The fg3_pct_h of this FeatureVector.
        :rtype: float
        """
        return self._fg3_pct_h

    @fg3_pct_h.setter
    def fg3_pct_h(self, fg3_pct_h: float):
        """Sets the fg3_pct_h of this FeatureVector.

        Three-point field goal percentage for the home team  # noqa: E501

        :param fg3_pct_h: The fg3_pct_h of this FeatureVector.
        :type fg3_pct_h: float
        """

        self._fg3_pct_h = fg3_pct_h

    @property
    def ft_pct_h(self) -> float:
        """Gets the ft_pct_h of this FeatureVector.

        Free throw percentage for the home team  # noqa: E501

        :return: The ft_pct_h of this FeatureVector.
        :rtype: float
        """
        return self._ft_pct_h

    @ft_pct_h.setter
    def ft_pct_h(self, ft_pct_h: float):
        """Sets the ft_pct_h of this FeatureVector.

        Free throw percentage for the home team  # noqa: E501

        :param ft_pct_h: The ft_pct_h of this FeatureVector.
        :type ft_pct_h: float
        """

        self._ft_pct_h = ft_pct_h

    @property
    def reb_h(self) -> int:
        """Gets the reb_h of this FeatureVector.

        Total rebounds for the home team  # noqa: E501

        :return: The reb_h of this FeatureVector.
        :rtype: int
        """
        return self._reb_h

    @reb_h.setter
    def reb_h(self, reb_h: int):
        """Sets the reb_h of this FeatureVector.

        Total rebounds for the home team  # noqa: E501

        :param reb_h: The reb_h of this FeatureVector.
        :type reb_h: int
        """

        self._reb_h = reb_h

    @property
    def tot_ast_h(self) -> int:
        """Gets the tot_ast_h of this FeatureVector.

        Total assists for the home team  # noqa: E501

        :return: The tot_ast_h of this FeatureVector.
        :rtype: int
        """
        return self._tot_ast_h

    @tot_ast_h.setter
    def tot_ast_h(self, tot_ast_h: int):
        """Sets the tot_ast_h of this FeatureVector.

        Total assists for the home team  # noqa: E501

        :param tot_ast_h: The tot_ast_h of this FeatureVector.
        :type tot_ast_h: int
        """

        self._tot_ast_h = tot_ast_h

    @property
    def tot_tov_h(self) -> int:
        """Gets the tot_tov_h of this FeatureVector.

        Total turnovers for the home team  # noqa: E501

        :return: The tot_tov_h of this FeatureVector.
        :rtype: int
        """
        return self._tot_tov_h

    @tot_tov_h.setter
    def tot_tov_h(self, tot_tov_h: int):
        """Sets the tot_tov_h of this FeatureVector.

        Total turnovers for the home team  # noqa: E501

        :param tot_tov_h: The tot_tov_h of this FeatureVector.
        :type tot_tov_h: int
        """

        self._tot_tov_h = tot_tov_h

    @property
    def tot_stl_h(self) -> int:
        """Gets the tot_stl_h of this FeatureVector.

        Total steals for the home team  # noqa: E501

        :return: The tot_stl_h of this FeatureVector.
        :rtype: int
        """
        return self._tot_stl_h

    @tot_stl_h.setter
    def tot_stl_h(self, tot_stl_h: int):
        """Sets the tot_stl_h of this FeatureVector.

        Total steals for the home team  # noqa: E501

        :param tot_stl_h: The tot_stl_h of this FeatureVector.
        :type tot_stl_h: int
        """

        self._tot_stl_h = tot_stl_h

    @property
    def tot_blk_h(self) -> int:
        """Gets the tot_blk_h of this FeatureVector.

        Total blocks for the home team  # noqa: E501

        :return: The tot_blk_h of this FeatureVector.
        :rtype: int
        """
        return self._tot_blk_h

    @tot_blk_h.setter
    def tot_blk_h(self, tot_blk_h: int):
        """Sets the tot_blk_h of this FeatureVector.

        Total blocks for the home team  # noqa: E501

        :param tot_blk_h: The tot_blk_h of this FeatureVector.
        :type tot_blk_h: int
        """

        self._tot_blk_h = tot_blk_h

    @property
    def ts_pct_h(self) -> float:
        """Gets the ts_pct_h of this FeatureVector.

        True shooting percentage for the home team  # noqa: E501

        :return: The ts_pct_h of this FeatureVector.
        :rtype: float
        """
        return self._ts_pct_h

    @ts_pct_h.setter
    def ts_pct_h(self, ts_pct_h: float):
        """Sets the ts_pct_h of this FeatureVector.

        True shooting percentage for the home team  # noqa: E501

        :param ts_pct_h: The ts_pct_h of this FeatureVector.
        :type ts_pct_h: float
        """

        self._ts_pct_h = ts_pct_h

    @property
    def w_pct_h(self) -> float:
        """Gets the w_pct_h of this FeatureVector.

        Winning percentage for the home team  # noqa: E501

        :return: The w_pct_h of this FeatureVector.
        :rtype: float
        """
        return self._w_pct_h

    @w_pct_h.setter
    def w_pct_h(self, w_pct_h: float):
        """Sets the w_pct_h of this FeatureVector.

        Winning percentage for the home team  # noqa: E501

        :param w_pct_h: The w_pct_h of this FeatureVector.
        :type w_pct_h: float
        """

        self._w_pct_h = w_pct_h

    @property
    def w_pct_last_5_games_h(self) -> float:
        """Gets the w_pct_last_5_games_h of this FeatureVector.

        Winning percentage in the last 5 games for the home team  # noqa: E501

        :return: The w_pct_last_5_games_h of this FeatureVector.
        :rtype: float
        """
        return self._w_pct_last_5_games_h

    @w_pct_last_5_games_h.setter
    def w_pct_last_5_games_h(self, w_pct_last_5_games_h: float):
        """Sets the w_pct_last_5_games_h of this FeatureVector.

        Winning percentage in the last 5 games for the home team  # noqa: E501

        :param w_pct_last_5_games_h: The w_pct_last_5_games_h of this FeatureVector.
        :type w_pct_last_5_games_h: float
        """

        self._w_pct_last_5_games_h = w_pct_last_5_games_h

    @property
    def fg_pct_a(self) -> float:
        """Gets the fg_pct_a of this FeatureVector.

        Field goal percentage for the away team  # noqa: E501

        :return: The fg_pct_a of this FeatureVector.
        :rtype: float
        """
        return self._fg_pct_a

    @fg_pct_a.setter
    def fg_pct_a(self, fg_pct_a: float):
        """Sets the fg_pct_a of this FeatureVector.

        Field goal percentage for the away team  # noqa: E501

        :param fg_pct_a: The fg_pct_a of this FeatureVector.
        :type fg_pct_a: float
        """

        self._fg_pct_a = fg_pct_a

    @property
    def fg3_pct_a(self) -> float:
        """Gets the fg3_pct_a of this FeatureVector.

        Three-point field goal percentage for the away team  # noqa: E501

        :return: The fg3_pct_a of this FeatureVector.
        :rtype: float
        """
        return self._fg3_pct_a

    @fg3_pct_a.setter
    def fg3_pct_a(self, fg3_pct_a: float):
        """Sets the fg3_pct_a of this FeatureVector.

        Three-point field goal percentage for the away team  # noqa: E501

        :param fg3_pct_a: The fg3_pct_a of this FeatureVector.
        :type fg3_pct_a: float
        """

        self._fg3_pct_a = fg3_pct_a

    @property
    def ft_pct_a(self) -> float:
        """Gets the ft_pct_a of this FeatureVector.

        Free throw percentage for the away team  # noqa: E501

        :return: The ft_pct_a of this FeatureVector.
        :rtype: float
        """
        return self._ft_pct_a

    @ft_pct_a.setter
    def ft_pct_a(self, ft_pct_a: float):
        """Sets the ft_pct_a of this FeatureVector.

        Free throw percentage for the away team  # noqa: E501

        :param ft_pct_a: The ft_pct_a of this FeatureVector.
        :type ft_pct_a: float
        """

        self._ft_pct_a = ft_pct_a

    @property
    def reb_a(self) -> int:
        """Gets the reb_a of this FeatureVector.

        Total rebounds for the away team  # noqa: E501

        :return: The reb_a of this FeatureVector.
        :rtype: int
        """
        return self._reb_a

    @reb_a.setter
    def reb_a(self, reb_a: int):
        """Sets the reb_a of this FeatureVector.

        Total rebounds for the away team  # noqa: E501

        :param reb_a: The reb_a of this FeatureVector.
        :type reb_a: int
        """

        self._reb_a = reb_a

    @property
    def tot_ast_a(self) -> int:
        """Gets the tot_ast_a of this FeatureVector.

        Total assists for the away team  # noqa: E501

        :return: The tot_ast_a of this FeatureVector.
        :rtype: int
        """
        return self._tot_ast_a

    @tot_ast_a.setter
    def tot_ast_a(self, tot_ast_a: int):
        """Sets the tot_ast_a of this FeatureVector.

        Total assists for the away team  # noqa: E501

        :param tot_ast_a: The tot_ast_a of this FeatureVector.
        :type tot_ast_a: int
        """

        self._tot_ast_a = tot_ast_a

    @property
    def tot_tov_a(self) -> int:
        """Gets the tot_tov_a of this FeatureVector.

        Total turnovers for the away team  # noqa: E501

        :return: The tot_tov_a of this FeatureVector.
        :rtype: int
        """
        return self._tot_tov_a

    @tot_tov_a.setter
    def tot_tov_a(self, tot_tov_a: int):
        """Sets the tot_tov_a of this FeatureVector.

        Total turnovers for the away team  # noqa: E501

        :param tot_tov_a: The tot_tov_a of this FeatureVector.
        :type tot_tov_a: int
        """

        self._tot_tov_a = tot_tov_a

    @property
    def tot_stl_a(self) -> int:
        """Gets the tot_stl_a of this FeatureVector.

        Total steals for the away team  # noqa: E501

        :return: The tot_stl_a of this FeatureVector.
        :rtype: int
        """
        return self._tot_stl_a

    @tot_stl_a.setter
    def tot_stl_a(self, tot_stl_a: int):
        """Sets the tot_stl_a of this FeatureVector.

        Total steals for the away team  # noqa: E501

        :param tot_stl_a: The tot_stl_a of this FeatureVector.
        :type tot_stl_a: int
        """

        self._tot_stl_a = tot_stl_a

    @property
    def tot_blk_a(self) -> int:
        """Gets the tot_blk_a of this FeatureVector.

        Total blocks for the away team  # noqa: E501

        :return: The tot_blk_a of this FeatureVector.
        :rtype: int
        """
        return self._tot_blk_a

    @tot_blk_a.setter
    def tot_blk_a(self, tot_blk_a: int):
        """Sets the tot_blk_a of this FeatureVector.

        Total blocks for the away team  # noqa: E501

        :param tot_blk_a: The tot_blk_a of this FeatureVector.
        :type tot_blk_a: int
        """

        self._tot_blk_a = tot_blk_a

    @property
    def ts_pct_a(self) -> float:
        """Gets the ts_pct_a of this FeatureVector.

        True shooting percentage for the away team  # noqa: E501

        :return: The ts_pct_a of this FeatureVector.
        :rtype: float
        """
        return self._ts_pct_a

    @ts_pct_a.setter
    def ts_pct_a(self, ts_pct_a: float):
        """Sets the ts_pct_a of this FeatureVector.

        True shooting percentage for the away team  # noqa: E501

        :param ts_pct_a: The ts_pct_a of this FeatureVector.
        :type ts_pct_a: float
        """

        self._ts_pct_a = ts_pct_a

    @property
    def w_pct_a(self) -> float:
        """Gets the w_pct_a of this FeatureVector.

        Winning percentage for the away team  # noqa: E501

        :return: The w_pct_a of this FeatureVector.
        :rtype: float
        """
        return self._w_pct_a

    @w_pct_a.setter
    def w_pct_a(self, w_pct_a: float):
        """Sets the w_pct_a of this FeatureVector.

        Winning percentage for the away team  # noqa: E501

        :param w_pct_a: The w_pct_a of this FeatureVector.
        :type w_pct_a: float
        """

        self._w_pct_a = w_pct_a

    @property
    def w_pct_last_5_games_a(self) -> float:
        """Gets the w_pct_last_5_games_a of this FeatureVector.

        Winning percentage in the last 5 games for the away team  # noqa: E501

        :return: The w_pct_last_5_games_a of this FeatureVector.
        :rtype: float
        """
        return self._w_pct_last_5_games_a

    @w_pct_last_5_games_a.setter
    def w_pct_last_5_games_a(self, w_pct_last_5_games_a: float):
        """Sets the w_pct_last_5_games_a of this FeatureVector.

        Winning percentage in the last 5 games for the away team  # noqa: E501

        :param w_pct_last_5_games_a: The w_pct_last_5_games_a of this FeatureVector.
        :type w_pct_last_5_games_a: float
        """

        self._w_pct_last_5_games_a = w_pct_last_5_games_a

    @property
    def off_rating_h(self) -> float:
        """Gets the off_rating_h of this FeatureVector.

        Offensive rating for the home team  # noqa: E501

        :return: The off_rating_h of this FeatureVector.
        :rtype: float
        """
        return self._off_rating_h

    @off_rating_h.setter
    def off_rating_h(self, off_rating_h: float):
        """Sets the off_rating_h of this FeatureVector.

        Offensive rating for the home team  # noqa: E501

        :param off_rating_h: The off_rating_h of this FeatureVector.
        :type off_rating_h: float
        """

        self._off_rating_h = off_rating_h

    @property
    def def_rating_h(self) -> float:
        """Gets the def_rating_h of this FeatureVector.

        Defensive rating for the home team  # noqa: E501

        :return: The def_rating_h of this FeatureVector.
        :rtype: float
        """
        return self._def_rating_h

    @def_rating_h.setter
    def def_rating_h(self, def_rating_h: float):
        """Sets the def_rating_h of this FeatureVector.

        Defensive rating for the home team  # noqa: E501

        :param def_rating_h: The def_rating_h of this FeatureVector.
        :type def_rating_h: float
        """

        self._def_rating_h = def_rating_h

    @property
    def off_rating_a(self) -> float:
        """Gets the off_rating_a of this FeatureVector.

        Offensive rating for the away team  # noqa: E501

        :return: The off_rating_a of this FeatureVector.
        :rtype: float
        """
        return self._off_rating_a

    @off_rating_a.setter
    def off_rating_a(self, off_rating_a: float):
        """Sets the off_rating_a of this FeatureVector.

        Offensive rating for the away team  # noqa: E501

        :param off_rating_a: The off_rating_a of this FeatureVector.
        :type off_rating_a: float
        """

        self._off_rating_a = off_rating_a

    @property
    def def_rating_a(self) -> float:
        """Gets the def_rating_a of this FeatureVector.

        Defensive rating for the away team  # noqa: E501

        :return: The def_rating_a of this FeatureVector.
        :rtype: float
        """
        return self._def_rating_a

    @def_rating_a.setter
    def def_rating_a(self, def_rating_a: float):
        """Sets the def_rating_a of this FeatureVector.

        Defensive rating for the away team  # noqa: E501

        :param def_rating_a: The def_rating_a of this FeatureVector.
        :type def_rating_a: float
        """

        self._def_rating_a = def_rating_a

    @property
    def lineup_efficiency_h(self) -> float:
        """Gets the lineup_efficiency_h of this FeatureVector.

        Lineup efficiency for the home team  # noqa: E501

        :return: The lineup_efficiency_h of this FeatureVector.
        :rtype: float
        """
        return self._lineup_efficiency_h

    @lineup_efficiency_h.setter
    def lineup_efficiency_h(self, lineup_efficiency_h: float):
        """Sets the lineup_efficiency_h of this FeatureVector.

        Lineup efficiency for the home team  # noqa: E501

        :param lineup_efficiency_h: The lineup_efficiency_h of this FeatureVector.
        :type lineup_efficiency_h: float
        """

        self._lineup_efficiency_h = lineup_efficiency_h

    @property
    def lineup_efficiency_a(self) -> float:
        """Gets the lineup_efficiency_a of this FeatureVector.

        Lineup efficiency for the away team  # noqa: E501

        :return: The lineup_efficiency_a of this FeatureVector.
        :rtype: float
        """
        return self._lineup_efficiency_a

    @lineup_efficiency_a.setter
    def lineup_efficiency_a(self, lineup_efficiency_a: float):
        """Sets the lineup_efficiency_a of this FeatureVector.

        Lineup efficiency for the away team  # noqa: E501

        :param lineup_efficiency_a: The lineup_efficiency_a of this FeatureVector.
        :type lineup_efficiency_a: float
        """

        self._lineup_efficiency_a = lineup_efficiency_a

    @property
    def home_team(self) -> str:
        """Gets the home_team of this FeatureVector.

        Home team code  # noqa: E501

        :return: The home_team of this FeatureVector.
        :rtype: str
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team: str):
        """Sets the home_team of this FeatureVector.

        Home team code  # noqa: E501

        :param home_team: The home_team of this FeatureVector.
        :type home_team: str
        """

        self._home_team = home_team

    @property
    def away_team(self) -> str:
        """Gets the away_team of this FeatureVector.

        Away team code  # noqa: E501

        :return: The away_team of this FeatureVector.
        :rtype: str
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team: str):
        """Sets the away_team of this FeatureVector.

        Away team code  # noqa: E501

        :param away_team: The away_team of this FeatureVector.
        :type away_team: str
        """

        self._away_team = away_team

    @property
    def game_id(self) -> str:
        """Gets the game_id of this FeatureVector.

        Unique identifier for the game  # noqa: E501

        :return: The game_id of this FeatureVector.
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id: str):
        """Sets the game_id of this FeatureVector.

        Unique identifier for the game  # noqa: E501

        :param game_id: The game_id of this FeatureVector.
        :type game_id: str
        """

        self._game_id = game_id

    @property
    def winner(self) -> str:
        """Gets the winner of this FeatureVector.

        Indicates which team won the game ('home' or 'away')  # noqa: E501

        :return: The winner of this FeatureVector.
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner: str):
        """Sets the winner of this FeatureVector.

        Indicates which team won the game ('home' or 'away')  # noqa: E501

        :param winner: The winner of this FeatureVector.
        :type winner: str
        """

        self._winner = winner

    @property
    def pts_h(self) -> int:
        """Gets the pts_h of this FeatureVector.

        Points scored by the home team  # noqa: E501

        :return: The pts_h of this FeatureVector.
        :rtype: int
        """
        return self._pts_h

    @pts_h.setter
    def pts_h(self, pts_h: int):
        """Sets the pts_h of this FeatureVector.

        Points scored by the home team  # noqa: E501

        :param pts_h: The pts_h of this FeatureVector.
        :type pts_h: int
        """

        self._pts_h = pts_h

    @property
    def pts_a(self) -> int:
        """Gets the pts_a of this FeatureVector.

        Points scored by the away team  # noqa: E501

        :return: The pts_a of this FeatureVector.
        :rtype: int
        """
        return self._pts_a

    @pts_a.setter
    def pts_a(self, pts_a: int):
        """Sets the pts_a of this FeatureVector.

        Points scored by the away team  # noqa: E501

        :param pts_a: The pts_a of this FeatureVector.
        :type pts_a: int
        """

        self._pts_a = pts_a

    @property
    def season(self) -> str:
        """Gets the season of this FeatureVector.

        Season year  # noqa: E501

        :return: The season of this FeatureVector.
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season: str):
        """Sets the season of this FeatureVector.

        Season year  # noqa: E501

        :param season: The season of this FeatureVector.
        :type season: str
        """

        self._season = season

    @property
    def _date(self) -> date:
        """Gets the _date of this FeatureVector.

        Date of the game  # noqa: E501

        :return: The _date of this FeatureVector.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this FeatureVector.

        Date of the game  # noqa: E501

        :param _date: The _date of this FeatureVector.
        :type _date: date
        """

        self.__date = _date

    @property
    def playoff(self) -> bool:
        """Gets the playoff of this FeatureVector.

        Indicates if the game was a playoff game  # noqa: E501

        :return: The playoff of this FeatureVector.
        :rtype: bool
        """
        return self._playoff

    @playoff.setter
    def playoff(self, playoff: bool):
        """Sets the playoff of this FeatureVector.

        Indicates if the game was a playoff game  # noqa: E501

        :param playoff: The playoff of this FeatureVector.
        :type playoff: bool
        """

        self._playoff = playoff

    @property
    def referee_name(self) -> str:
        """Gets the referee_name of this FeatureVector.

        Name of the referee  # noqa: E501

        :return: The referee_name of this FeatureVector.
        :rtype: str
        """
        return self._referee_name

    @referee_name.setter
    def referee_name(self, referee_name: str):
        """Sets the referee_name of this FeatureVector.

        Name of the referee  # noqa: E501

        :param referee_name: The referee_name of this FeatureVector.
        :type referee_name: str
        """

        self._referee_name = referee_name

    @property
    def referee_id(self) -> int:
        """Gets the referee_id of this FeatureVector.

        Identifier of the referee  # noqa: E501

        :return: The referee_id of this FeatureVector.
        :rtype: int
        """
        return self._referee_id

    @referee_id.setter
    def referee_id(self, referee_id: int):
        """Sets the referee_id of this FeatureVector.

        Identifier of the referee  # noqa: E501

        :param referee_id: The referee_id of this FeatureVector.
        :type referee_id: int
        """

        self._referee_id = referee_id
