# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.average import Average  # noqa: F401,E501
from swagger_server.models.team_match_stat import TeamMatchStat  # noqa: F401,E501
from swagger_server.models.team_stats_totals import TeamStatsTotals  # noqa: F401,E501
from swagger_server import util


class TeamStats(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, all_stats: List[TeamMatchStat]=None, totals: List[TeamStatsTotals]=None, average: Average=None):  # noqa: E501
        """TeamStats - a model defined in Swagger

        :param all_stats: The all_stats of this TeamStats.  # noqa: E501
        :type all_stats: List[TeamMatchStat]
        :param totals: The totals of this TeamStats.  # noqa: E501
        :type totals: List[TeamStatsTotals]
        :param average: The average of this TeamStats.  # noqa: E501
        :type average: Average
        """
        self.swagger_types = {
            'all_stats': List[TeamMatchStat],
            'totals': List[TeamStatsTotals],
            'average': Average
        }

        self.attribute_map = {
            'all_stats': 'all_stats',
            'totals': 'totals',
            'average': 'average'
        }
        self._all_stats = all_stats
        self._totals = totals
        self._average = average

    @classmethod
    def from_dict(cls, dikt) -> 'TeamStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TeamStats of this TeamStats.  # noqa: E501
        :rtype: TeamStats
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_stats(self) -> List[TeamMatchStat]:
        """Gets the all_stats of this TeamStats.


        :return: The all_stats of this TeamStats.
        :rtype: List[TeamMatchStat]
        """
        return self._all_stats

    @all_stats.setter
    def all_stats(self, all_stats: List[TeamMatchStat]):
        """Sets the all_stats of this TeamStats.


        :param all_stats: The all_stats of this TeamStats.
        :type all_stats: List[TeamMatchStat]
        """

        self._all_stats = all_stats

    @property
    def totals(self) -> List[TeamStatsTotals]:
        """Gets the totals of this TeamStats.


        :return: The totals of this TeamStats.
        :rtype: List[TeamStatsTotals]
        """
        return self._totals

    @totals.setter
    def totals(self, totals: List[TeamStatsTotals]):
        """Sets the totals of this TeamStats.


        :param totals: The totals of this TeamStats.
        :type totals: List[TeamStatsTotals]
        """

        self._totals = totals

    @property
    def average(self) -> Average:
        """Gets the average of this TeamStats.


        :return: The average of this TeamStats.
        :rtype: Average
        """
        return self._average

    @average.setter
    def average(self, average: Average):
        """Sets the average of this TeamStats.


        :param average: The average of this TeamStats.
        :type average: Average
        """

        self._average = average
