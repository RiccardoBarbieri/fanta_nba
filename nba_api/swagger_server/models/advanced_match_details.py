# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdvancedMatchDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, match_id: int=None, home_team_id: int=None, away_team_id: int=None, home_team_score: int=None, away_team_score: int=None, winner: str=None, point_difference: int=None):  # noqa: E501
        """AdvancedMatchDetails - a model defined in Swagger

        :param match_id: The match_id of this AdvancedMatchDetails.  # noqa: E501
        :type match_id: int
        :param home_team_id: The home_team_id of this AdvancedMatchDetails.  # noqa: E501
        :type home_team_id: int
        :param away_team_id: The away_team_id of this AdvancedMatchDetails.  # noqa: E501
        :type away_team_id: int
        :param home_team_score: The home_team_score of this AdvancedMatchDetails.  # noqa: E501
        :type home_team_score: int
        :param away_team_score: The away_team_score of this AdvancedMatchDetails.  # noqa: E501
        :type away_team_score: int
        :param winner: The winner of this AdvancedMatchDetails.  # noqa: E501
        :type winner: str
        :param point_difference: The point_difference of this AdvancedMatchDetails.  # noqa: E501
        :type point_difference: int
        """
        self.swagger_types = {
            'match_id': int,
            'home_team_id': int,
            'away_team_id': int,
            'home_team_score': int,
            'away_team_score': int,
            'winner': str,
            'point_difference': int
        }

        self.attribute_map = {
            'match_id': 'match_id',
            'home_team_id': 'home_team_id',
            'away_team_id': 'away_team_id',
            'home_team_score': 'home_team_score',
            'away_team_score': 'away_team_score',
            'winner': 'winner',
            'point_difference': 'point_difference'
        }
        self._match_id = match_id
        self._home_team_id = home_team_id
        self._away_team_id = away_team_id
        self._home_team_score = home_team_score
        self._away_team_score = away_team_score
        self._winner = winner
        self._point_difference = point_difference

    @classmethod
    def from_dict(cls, dikt) -> 'AdvancedMatchDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdvancedMatchDetails of this AdvancedMatchDetails.  # noqa: E501
        :rtype: AdvancedMatchDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_id(self) -> int:
        """Gets the match_id of this AdvancedMatchDetails.


        :return: The match_id of this AdvancedMatchDetails.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id: int):
        """Sets the match_id of this AdvancedMatchDetails.


        :param match_id: The match_id of this AdvancedMatchDetails.
        :type match_id: int
        """

        self._match_id = match_id

    @property
    def home_team_id(self) -> int:
        """Gets the home_team_id of this AdvancedMatchDetails.


        :return: The home_team_id of this AdvancedMatchDetails.
        :rtype: int
        """
        return self._home_team_id

    @home_team_id.setter
    def home_team_id(self, home_team_id: int):
        """Sets the home_team_id of this AdvancedMatchDetails.


        :param home_team_id: The home_team_id of this AdvancedMatchDetails.
        :type home_team_id: int
        """

        self._home_team_id = home_team_id

    @property
    def away_team_id(self) -> int:
        """Gets the away_team_id of this AdvancedMatchDetails.


        :return: The away_team_id of this AdvancedMatchDetails.
        :rtype: int
        """
        return self._away_team_id

    @away_team_id.setter
    def away_team_id(self, away_team_id: int):
        """Sets the away_team_id of this AdvancedMatchDetails.


        :param away_team_id: The away_team_id of this AdvancedMatchDetails.
        :type away_team_id: int
        """

        self._away_team_id = away_team_id

    @property
    def home_team_score(self) -> int:
        """Gets the home_team_score of this AdvancedMatchDetails.


        :return: The home_team_score of this AdvancedMatchDetails.
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score: int):
        """Sets the home_team_score of this AdvancedMatchDetails.


        :param home_team_score: The home_team_score of this AdvancedMatchDetails.
        :type home_team_score: int
        """

        self._home_team_score = home_team_score

    @property
    def away_team_score(self) -> int:
        """Gets the away_team_score of this AdvancedMatchDetails.


        :return: The away_team_score of this AdvancedMatchDetails.
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score: int):
        """Sets the away_team_score of this AdvancedMatchDetails.


        :param away_team_score: The away_team_score of this AdvancedMatchDetails.
        :type away_team_score: int
        """

        self._away_team_score = away_team_score

    @property
    def winner(self) -> str:
        """Gets the winner of this AdvancedMatchDetails.


        :return: The winner of this AdvancedMatchDetails.
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner: str):
        """Sets the winner of this AdvancedMatchDetails.


        :param winner: The winner of this AdvancedMatchDetails.
        :type winner: str
        """
        allowed_values = ["home", "away"]  # noqa: E501
        if winner not in allowed_values:
            raise ValueError(
                "Invalid value for `winner` ({0}), must be one of {1}"
                .format(winner, allowed_values)
            )

        self._winner = winner

    @property
    def point_difference(self) -> int:
        """Gets the point_difference of this AdvancedMatchDetails.


        :return: The point_difference of this AdvancedMatchDetails.
        :rtype: int
        """
        return self._point_difference

    @point_difference.setter
    def point_difference(self, point_difference: int):
        """Sets the point_difference of this AdvancedMatchDetails.


        :param point_difference: The point_difference of this AdvancedMatchDetails.
        :type point_difference: int
        """

        self._point_difference = point_difference
