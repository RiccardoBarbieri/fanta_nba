# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Player(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, player_id: int=None, player: str=None, num: str=None, position: str=None, height: str=None, weight: int=None, age: float=None, exp: str=None):  # noqa: E501
        """Player - a model defined in Swagger

        :param player_id: The player_id of this Player.  # noqa: E501
        :type player_id: int
        :param player: The player of this Player.  # noqa: E501
        :type player: str
        :param num: The num of this Player.  # noqa: E501
        :type num: str
        :param position: The position of this Player.  # noqa: E501
        :type position: str
        :param height: The height of this Player.  # noqa: E501
        :type height: str
        :param weight: The weight of this Player.  # noqa: E501
        :type weight: int
        :param age: The age of this Player.  # noqa: E501
        :type age: float
        :param exp: The exp of this Player.  # noqa: E501
        :type exp: str
        """
        self.swagger_types = {
            'player_id': int,
            'player': str,
            'num': str,
            'position': str,
            'height': str,
            'weight': int,
            'age': float,
            'exp': str
        }

        self.attribute_map = {
            'player_id': 'player_id',
            'player': 'player',
            'num': 'num',
            'position': 'position',
            'height': 'height',
            'weight': 'weight',
            'age': 'age',
            'exp': 'exp'
        }
        self._player_id = player_id
        self._player = player
        self._num = num
        self._position = position
        self._height = height
        self._weight = weight
        self._age = age
        self._exp = exp

    @classmethod
    def from_dict(cls, dikt) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Player of this Player.  # noqa: E501
        :rtype: Player
        """
        return util.deserialize_model(dikt, cls)

    @property
    def player_id(self) -> int:
        """Gets the player_id of this Player.


        :return: The player_id of this Player.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id: int):
        """Sets the player_id of this Player.


        :param player_id: The player_id of this Player.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def player(self) -> str:
        """Gets the player of this Player.


        :return: The player of this Player.
        :rtype: str
        """
        return self._player

    @player.setter
    def player(self, player: str):
        """Sets the player of this Player.


        :param player: The player of this Player.
        :type player: str
        """

        self._player = player

    @property
    def num(self) -> str:
        """Gets the num of this Player.


        :return: The num of this Player.
        :rtype: str
        """
        return self._num

    @num.setter
    def num(self, num: str):
        """Sets the num of this Player.


        :param num: The num of this Player.
        :type num: str
        """

        self._num = num

    @property
    def position(self) -> str:
        """Gets the position of this Player.


        :return: The position of this Player.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """Sets the position of this Player.


        :param position: The position of this Player.
        :type position: str
        """

        self._position = position

    @property
    def height(self) -> str:
        """Gets the height of this Player.


        :return: The height of this Player.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height: str):
        """Sets the height of this Player.


        :param height: The height of this Player.
        :type height: str
        """

        self._height = height

    @property
    def weight(self) -> int:
        """Gets the weight of this Player.


        :return: The weight of this Player.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight: int):
        """Sets the weight of this Player.


        :param weight: The weight of this Player.
        :type weight: int
        """

        self._weight = weight

    @property
    def age(self) -> float:
        """Gets the age of this Player.


        :return: The age of this Player.
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age: float):
        """Sets the age of this Player.


        :param age: The age of this Player.
        :type age: float
        """

        self._age = age

    @property
    def exp(self) -> str:
        """Gets the exp of this Player.


        :return: The exp of this Player.
        :rtype: str
        """
        return self._exp

    @exp.setter
    def exp(self, exp: str):
        """Sets the exp of this Player.


        :param exp: The exp of this Player.
        :type exp: str
        """

        self._exp = exp
