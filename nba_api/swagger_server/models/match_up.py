# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.team_base import TeamBase  # noqa: F401,E501
from swagger_server import util


class MatchUp(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, home_team: TeamBase=None, away_team: TeamBase=None, date_time: datetime=None, city_arena: str=None, referee: str=None, season_type: str=None):  # noqa: E501
        """MatchUp - a model defined in Swagger

        :param id: The id of this MatchUp.  # noqa: E501
        :type id: int
        :param home_team: The home_team of this MatchUp.  # noqa: E501
        :type home_team: TeamBase
        :param away_team: The away_team of this MatchUp.  # noqa: E501
        :type away_team: TeamBase
        :param date_time: The date_time of this MatchUp.  # noqa: E501
        :type date_time: datetime
        :param city_arena: The city_arena of this MatchUp.  # noqa: E501
        :type city_arena: str
        :param referee: The referee of this MatchUp.  # noqa: E501
        :type referee: str
        :param season_type: The season_type of this MatchUp.  # noqa: E501
        :type season_type: str
        """
        self.swagger_types = {
            'id': int,
            'home_team': TeamBase,
            'away_team': TeamBase,
            'date_time': datetime,
            'city_arena': str,
            'referee': str,
            'season_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'home_team': 'home_team',
            'away_team': 'away_team',
            'date_time': 'date_time',
            'city_arena': 'city_arena',
            'referee': 'referee',
            'season_type': 'season_type'
        }
        self._id = id
        self._home_team = home_team
        self._away_team = away_team
        self._date_time = date_time
        self._city_arena = city_arena
        self._referee = referee
        self._season_type = season_type

    @classmethod
    def from_dict(cls, dikt) -> 'MatchUp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MatchUp of this MatchUp.  # noqa: E501
        :rtype: MatchUp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this MatchUp.


        :return: The id of this MatchUp.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this MatchUp.


        :param id: The id of this MatchUp.
        :type id: int
        """

        self._id = id

    @property
    def home_team(self) -> TeamBase:
        """Gets the home_team of this MatchUp.


        :return: The home_team of this MatchUp.
        :rtype: TeamBase
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team: TeamBase):
        """Sets the home_team of this MatchUp.


        :param home_team: The home_team of this MatchUp.
        :type home_team: TeamBase
        """

        self._home_team = home_team

    @property
    def away_team(self) -> TeamBase:
        """Gets the away_team of this MatchUp.


        :return: The away_team of this MatchUp.
        :rtype: TeamBase
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team: TeamBase):
        """Sets the away_team of this MatchUp.


        :param away_team: The away_team of this MatchUp.
        :type away_team: TeamBase
        """

        self._away_team = away_team

    @property
    def date_time(self) -> datetime:
        """Gets the date_time of this MatchUp.


        :return: The date_time of this MatchUp.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: datetime):
        """Sets the date_time of this MatchUp.


        :param date_time: The date_time of this MatchUp.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def city_arena(self) -> str:
        """Gets the city_arena of this MatchUp.


        :return: The city_arena of this MatchUp.
        :rtype: str
        """
        return self._city_arena

    @city_arena.setter
    def city_arena(self, city_arena: str):
        """Sets the city_arena of this MatchUp.


        :param city_arena: The city_arena of this MatchUp.
        :type city_arena: str
        """

        self._city_arena = city_arena

    @property
    def referee(self) -> str:
        """Gets the referee of this MatchUp.


        :return: The referee of this MatchUp.
        :rtype: str
        """
        return self._referee

    @referee.setter
    def referee(self, referee: str):
        """Sets the referee of this MatchUp.


        :param referee: The referee of this MatchUp.
        :type referee: str
        """

        self._referee = referee

    @property
    def season_type(self) -> str:
        """Gets the season_type of this MatchUp.


        :return: The season_type of this MatchUp.
        :rtype: str
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type: str):
        """Sets the season_type of this MatchUp.


        :param season_type: The season_type of this MatchUp.
        :type season_type: str
        """
        allowed_values = ["Regular Season", "Playoffs", "All Star", "Pre Season"]  # noqa: E501
        if season_type not in allowed_values:
            raise ValueError(
                "Invalid value for `season_type` ({0}), must be one of {1}"
                .format(season_type, allowed_values)
            )

        self._season_type = season_type
