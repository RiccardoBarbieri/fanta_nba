# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.average_player import AveragePlayer  # noqa: F401,E501
from swagger_server.models.player_match_stats import PlayerMatchStats  # noqa: F401,E501
from swagger_server.models.player_stats_player_efficiency import PlayerStatsPlayerEfficiency  # noqa: F401,E501
from swagger_server.models.team_stats_totals import TeamStatsTotals  # noqa: F401,E501
from swagger_server import util


class PlayerStats(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, all_stats: List[PlayerMatchStats]=None, totals: List[TeamStatsTotals]=None, average: AveragePlayer=None, player_efficiency: List[PlayerStatsPlayerEfficiency]=None):  # noqa: E501
        """PlayerStats - a model defined in Swagger

        :param all_stats: The all_stats of this PlayerStats.  # noqa: E501
        :type all_stats: List[PlayerMatchStats]
        :param totals: The totals of this PlayerStats.  # noqa: E501
        :type totals: List[TeamStatsTotals]
        :param average: The average of this PlayerStats.  # noqa: E501
        :type average: AveragePlayer
        :param player_efficiency: The player_efficiency of this PlayerStats.  # noqa: E501
        :type player_efficiency: List[PlayerStatsPlayerEfficiency]
        """
        self.swagger_types = {
            'all_stats': List[PlayerMatchStats],
            'totals': List[TeamStatsTotals],
            'average': AveragePlayer,
            'player_efficiency': List[PlayerStatsPlayerEfficiency]
        }

        self.attribute_map = {
            'all_stats': 'all_stats',
            'totals': 'totals',
            'average': 'average',
            'player_efficiency': 'player_efficiency'
        }
        self._all_stats = all_stats
        self._totals = totals
        self._average = average
        self._player_efficiency = player_efficiency

    @classmethod
    def from_dict(cls, dikt) -> 'PlayerStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayerStats of this PlayerStats.  # noqa: E501
        :rtype: PlayerStats
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_stats(self) -> List[PlayerMatchStats]:
        """Gets the all_stats of this PlayerStats.


        :return: The all_stats of this PlayerStats.
        :rtype: List[PlayerMatchStats]
        """
        return self._all_stats

    @all_stats.setter
    def all_stats(self, all_stats: List[PlayerMatchStats]):
        """Sets the all_stats of this PlayerStats.


        :param all_stats: The all_stats of this PlayerStats.
        :type all_stats: List[PlayerMatchStats]
        """

        self._all_stats = all_stats

    @property
    def totals(self) -> List[TeamStatsTotals]:
        """Gets the totals of this PlayerStats.


        :return: The totals of this PlayerStats.
        :rtype: List[TeamStatsTotals]
        """
        return self._totals

    @totals.setter
    def totals(self, totals: List[TeamStatsTotals]):
        """Sets the totals of this PlayerStats.


        :param totals: The totals of this PlayerStats.
        :type totals: List[TeamStatsTotals]
        """

        self._totals = totals

    @property
    def average(self) -> AveragePlayer:
        """Gets the average of this PlayerStats.


        :return: The average of this PlayerStats.
        :rtype: AveragePlayer
        """
        return self._average

    @average.setter
    def average(self, average: AveragePlayer):
        """Sets the average of this PlayerStats.


        :param average: The average of this PlayerStats.
        :type average: AveragePlayer
        """

        self._average = average

    @property
    def player_efficiency(self) -> List[PlayerStatsPlayerEfficiency]:
        """Gets the player_efficiency of this PlayerStats.


        :return: The player_efficiency of this PlayerStats.
        :rtype: List[PlayerStatsPlayerEfficiency]
        """
        return self._player_efficiency

    @player_efficiency.setter
    def player_efficiency(self, player_efficiency: List[PlayerStatsPlayerEfficiency]):
        """Sets the player_efficiency of this PlayerStats.


        :param player_efficiency: The player_efficiency of this PlayerStats.
        :type player_efficiency: List[PlayerStatsPlayerEfficiency]
        """

        self._player_efficiency = player_efficiency
