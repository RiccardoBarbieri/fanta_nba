/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Event;
import io.swagger.model.Sport;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-06-24T10:03:13.459259793Z[GMT]")
@Validated
public interface SportsApi {

    @Operation(summary = "Get events list", description = "Returns all available events.", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of all available events", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Event.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The request parameters are invalid."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - API key is missing or invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - You do not have permission to access this resource."),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - An error occurred on the server.") })
    @RequestMapping(value = "/sports/getEvents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> sportsGetEventsGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The sport key of the event" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "sportKey", required = true) String sportKey
, @Parameter(in = ParameterIn.QUERY, description = "Comma-separated list of regions to get odds for (e.g., \"us,uk,eu\")" ,schema=@Schema( defaultValue="eu,uk")) @Valid @RequestParam(value = "regions", required = false, defaultValue="eu,uk") String regions
);


    @Operation(summary = "Get sports list", description = "Returns all available sports.", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of all available sports", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Sport.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The request parameters are invalid."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - API key is missing or invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - You do not have permission to access this resource."),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - An error occurred on the server.") })
    @RequestMapping(value = "/sports/getSports",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Sport>> sportsGetSportsGet();

}

